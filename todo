+ Parsing to find the right delimiter (counting pairs, ignore quotes)
+ Conversion of command output.
+ Support quotes in commands. Interpret { with spaces } properly
+ Make ! $env strict and {$env} soft
+ Print when alone on a line. Otherwise by default return the stdout, but print stderr.
+ Capture stderr. Option to combine stdout and stderr
+ Reset sys.argv
+ Use shell with a flag 's'
+ Run in backgroud with a flag 'p', return the proc object
+ Flag 'b' to get binary instead of unicode
+ Flag 'v' to clean the environment
+ Allow {..} inside of {python expressions}
+ Support quoting properly
+ Easy way to work with path ('base' / 'file')

- Take input data: (input expression output ! cmd | cmd2 > output file)
- Make redirects with | and > before or after the !command
  And (! < in_file), and (! > out_file)
  Or:              (input file > ! cmd)
  Copy:            (source > ! > destination)
- Integrate docopt, parse usage string into arguments parser. Optional. Fallback
  to basic implementation, or laxist that just take all arguments.
  OR deduce from instances of $--arg
- raise anything
- Refactor parser
- Alternative list syntax: [Aaa Bbb "quoted string" "for" "if"]
- Explicit multi parameters expansion with {*list}
- Explicit multi parameters groups expansion with {** [('-o', option) ..]}
- Support escaping
- Auto quote expression in shell mode ('h'). Handle new lines, comments, quotes.
- A literal string beginning a line should be printed (or the whole expression).
  Or any expression that returns a string? Risk of errors and print crap.
  Whitelist juste les couleurs? Conflit avec docstrings.
- .format shortcut:    "This is {} and that is {}" this, that
  Multiline?
  Or String interpolation
- Mod√®le de projet, cookiescutter
- joinpaths should avoid double paths
- Test *_lib code into flake8 automatically
- Debug mode that print all function calls to stderr
- Full syntax check and error messages (brackets matching, ..)
- Make the runtime part safe from user overwriting variables
- Handling of fds? close_fds, ..
- Allow stream/file-like pipes
- Config file facility?
- Input conversion, {l list of lines}, {j json-like}, or J flag for json to stdin
- Validate flags
- Minimal imports
- Globbing
- Automatic detection of command based on syntax
- Check existence of executables, arguments and variables before starting
- Add syntax for anonymous functions
- Facilities to search through columns, ..
- Combinations of flags: int, float on each result
- int, float, str apply with map if on a list
- Ability to embed all libraries in a single big file
